# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {globalAuthRule: AuthRule = { allow: public }}


type Calendar @model {
  id: ID! 
  name: String!
  events: [Event] @hasMany(indexName: "byCalendar", fields: ["id"])
  owner: User @belongsTo(fields: ["ownerId"])
  ownerId: ID @index(name: "byOwner", sortKeyFields: ["id"])
  isPrivate: Boolean!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Event @model {
  id: ID!
  title: String!
  type: String!
  startDate: AWSDateTime!
  endDate: AWSDateTime!
  duration: Int!
  notes: String
  calendarId: ID! @index(name: "byCalendar", sortKeyFields: ["id"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Friendship @model {
  id: ID!
  requesterId: ID! @index(name: "byRequester")
  requesteeId: ID! @index(name: "byRequestee")
  status: FriendshipStatus!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  requester: String 
  requestee: String
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

type Post @model {
  id: ID!
  desiredPosition: String!
  location: String!
  date: AWSDateTime!
  duration: String!
  description: String!
  ownerId: ID! @index(name: "bySourceUser", sortKeyFields: ["id"])
  viewLevel: String!
}

type User @model {
  id: ID!
  name: String!
  phoneNumber: String
  email: String
  friends: [Friendship] @hasMany(indexName: "byRequester", fields: ["id"])
  friendRequests: [Friendship] @hasMany(indexName: "byRequestee", fields: ["id"])
  posts: [Post] @hasMany(indexName: "bySourceUser", fields: ["id"])
  calendars: [Calendar] @hasMany(indexName: "byOwner", fields: ["id"])
}

type Conversation @model {
  id: ID!
  participants: [String!]!
  messages: [Message] @hasMany(indexName: "byConversation", fields: ["id"])
  lastMessageAt: AWSDateTime
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Message @model {
  id: ID!
  content: String!
  senderId: ID! @index(name: "bySender")
  conversationId: ID! @index(name: "byConversation", sortKeyFields: ["id"])
  createdAt: AWSDateTime @index(name: "byConversationIdAndId", sortKeyFields: ["id"])
}